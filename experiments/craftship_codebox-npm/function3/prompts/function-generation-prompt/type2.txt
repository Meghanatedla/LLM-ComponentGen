 
You are a computer scientist specializing in serverless computing (especially FaaS).
You are working with a FaaS codebase whose description is as follows:

```
## Codebase Summary for craftship_codebox-npm

This codebase implements a private npm registry using AWS Lambda functions (Node.js) and S3 for storage. It leverages GitHub for authentication and authorization.

**1. High-Level Overview:**

The codebase provides functionalities for publishing, downloading, and managing npm packages within a private registry. It uses S3 to store package data and metadata, and Lambda functions to handle various API requests. GitHub integration provides secure access control.  Additionally, the codebase includes custom serverless plugins for maintenance tasks like data migration, encryption, and indexing.

**2. Breakdown of Important Functions:**

**Lambda Functions:**

* **`/src/whoami/get.js`**: Returns the username of the currently logged-in user.  It retrieves the username from the `requestContext` provided by the API Gateway authorizer.

* **`/src/tar/get.js`**: Retrieves the tarball of a specific package version. It first checks S3. If the tarball is not present, it fetches it from the configured upstream npm registry and returns it base64 encoded.

* **`/src/authorizers/github.js`**:  Authenticates users against GitHub. It verifies the provided GitHub token and generates an IAM policy that allows or denies access to specific API Gateway resources based on user roles (admin or regular user) and organization membership (if configured).

* **`/src/dist-tags/delete.js`**: Deletes a specific distribution tag from a package.  Retrieves package metadata from S3, removes the specified tag, updates the metadata in S3, and logs the action.

* **`/src/dist-tags/get.js`**: Retrieves the distribution tags for a specific package.  It checks for the package metadata in S3 and returns the tags. If the package is not found locally, it falls back to the upstream npm registry.

* **`/src/get/index.js`**: Retrieves the package metadata (package.json) for a specific package.  It uses `/src/get/lib.js` to perform the retrieval logic, which includes checking S3 and falling back to the upstream npm registry if needed.

* **`/src/get/lib.js`**: Contains the core logic for fetching package metadata. It checks S3 first, falls back to the upstream registry, and logs package access.


* **`/src/user/delete.js`**: Logs out the user by revoking their GitHub access token.


* **`/src/user/put.js`**:  Logs in the user using their GitHub credentials and generates a GitHub access token. Handles Two-Factor Authentication (2FA) as well.


* **`/src/put/publish.js`**: Publishes a new package or a new version of an existing package. It checks for name conflicts with the public registry, stores the tarball and updated metadata in S3, and logs the publishing event.


* **`/src/put/deprecate.js`**: Deprecates a specific version of a package. Stores the updated package metadata (including the deprecation message) in S3.


* **`/src/put/index.js`**: Handles `PUT` requests for packages, delegating to either `publish` or `deprecate` based on the command being executed.



**Serverless Plugins:**

* **`/.serverless_plugins/codebox-tools/index.js`**: This plugin provides tools for managing the private registry. It implements commands for:
    * **`domain`**: Updates the hosted domain for the registry.
    * **`encrypt`**: Re-encrypts all files within the S3 bucket.
    * **`index`**: Re-indexes all packages into Codebox Insights.

* **`/.serverless_plugins/remove-storage/index.js`**: This plugin deletes the S3 bucket and all its contents before service removal.


**3. External Dependencies:**

* **`aws-sdk`**: Used for interacting with AWS services, primarily S3 and Lambda.
* **`node-fetch`**: Used for making HTTP requests, specifically to the upstream npm registry and the Codebox logging service.
* **`@octokit/rest`**: Used for interacting with the GitHub API for authentication and authorization.



**4. Codebase Structure:**

The codebase is organized by functionality, with each Lambda function residing in its own directory under `src`.  Adapter modules (`s3.js`, `logger.js`, `npm.js`) provide abstractions for interacting with external services. The serverless plugins are located under `.serverless_plugins`. Test files are located in a separate `test` directory mimicking the `src` structure.

**5. Module Interactions & Data Flow:**

* **Lambda functions:** invoked by API Gateway requests, often using path parameters to determine the operation and the package name.

* **`S3` adapter:**  used by Lambda functions to store and retrieve package data (tarballs, metadata).

* **`npm` adapter:**  used by Lambda functions to interact with the upstream npm registry, primarily for fetching package information when it is not available in the private registry.

* **`logger` adapter:**  used to log events to the Codebox logging service.

* **GitHub API:** used by the authorizer and user management functions for authentication, authorization, and managing user tokens.

* **Serverless plugins:** interact with AWS services (S3, Lambda) to perform maintenance tasks.


**Practices/Styles:**

* ES6 modules are used throughout the codebase.
* Async/await is heavily used for asynchronous operations.
*  The `contextFactory.js` file provides a consistent way to create and pass context objects to Lambda functions, which contain commonly needed objects and parameters.
*  All functions expect event, context, and callback as parameters.
*  Base64 encoding is used for storing and transferring tarballs.


This detailed summary should allow developers to implement new functions and understand the relationships between different modules within the `craftship_codebox-npm` codebase without having to examine the original source files extensively.


```

Your task is to add a new function to this codebase. 
The function should have the following functionality:

This serverless function updates the distribution tags (dist-tags) of a specified npm package within an S3 bucket.  It's designed for a serverless environment, likely AWS Lambda, given its input parameters and use of a callback function.

1. **Implementation Details:**

    * **Parameters:**
        * `requestContext`: Contains information about the invoking event, including user details (username, avatar) derived from an authorizer (likely an API Gateway authorizer).
        * `body`: The request body containing the new version number to associate with the given distribution tag.
        * `pathParameters`: Contains path parameters extracted from the request URI, specifically the `name` of the npm package and the `tag` (e.g., `latest`, `beta`) to update.
        * `context`: The Lambda context object (not used in this function).
        * `callback`: A callback function for returning a response.

    * **Return Value:**  The function doesn't explicitly return a value but uses the provided `callback` to return a response to the caller. The response is an object with a `statusCode` (200 for success, 500 for error) and a JSON string body. The body contains `ok` (true/false) indicating success or failure, and other details like package `id` and updated `dist-tags` on success or `error` message on failure.

    * **Logic:** The function retrieves an existing `index.json` file for the given package name from an S3 bucket. It parses the JSON content, updates the `dist-tags` entry with the provided tag and version, and saves the modified `index.json` back to the S3 bucket. It then logs the update operation and returns a success response. In case of errors (e.g., S3 access issues, JSON parsing errors), it logs the error and returns an error response.


2. **Relationships:**

    * **S3:** The function interacts with an S3 bucket to read and write package metadata (the `index.json` file). It uses the `S3` adapter (`../adapters/s3`) for this interaction.
    * **Logger:** It utilizes a `Logger` adapter (`../adapters/logger`) for logging informational and error messages. Logs are presumably sent to a specified log topic.
    * **Environment Variables:** The function relies on environment variables (`process.env`) for configuration: `bucket`, `region` (for S3), and `logTopic`.


3. **Structure:**

    * The function first initializes S3 and Logger instances using environment variables and request context.
    * It then extracts the package name and target dist-tag from `pathParameters`.
    * Within a `try...catch` block, it fetches, parses, modifies, and saves the `index.json` file from/to S3.
    * After a successful update, it logs the change and returns a success response via the callback.
    * If an error occurs during any of these steps, the `catch` block logs the error and returns a failure response via the callback.


4. **Purpose and Role:**

    This function serves as an endpoint for updating the distribution tags of npm packages stored in an S3 bucket.  It plays a crucial role in package management, allowing for version control and release management. The use of S3 suggests this might be part of a private or custom npm registry implementation.


This description provides a high-level overview and clarifies the function's interactions. The implementation can be further improved by using more robust error handling and potentially adding input validation to ensure the incoming data conforms to expectations. The specifics of the `S3` and `Logger` adapters are abstracted away, allowing for flexibility in implementation and potential replacement with alternative libraries or services.


Please generate the complete code for this function, ensuring it integrates seamlessly with the existing system. 
The code should follow best practices for serverless development, and it must be in accordance with the current architecture of the system.
Note that no human will evaluate the code you generate; your code will be deployed directly to the system. 
Ensure that you do not provide anything except the code. Include any relevant information in comments. 
If you lack any information to write the complete code, mention this in a comment and make a reasonable assumption from the context and your knowledge.
