You are a computer scientist specializing in serverless computing (especially FaaS).
You are working with a FaaS codebase whose README is as follows:

<p align="center">
  <img alt="Laconia" src="docs/logo/2/png/2_vertical@0.5x.png">
</p>

<!-- ALL-CONTRIBUTORS-BADGE:START - Do not remove or modify this section -->
[![All Contributors](https://img.shields.io/badge/all_contributors-10-orange.svg?style=flat-square)](#contributors-)
<!-- ALL-CONTRIBUTORS-BADGE:END -->
[![CircleCI](https://circleci.com/gh/laconiajs/laconia/tree/master.svg?style=shield)](https://circleci.com/gh/laconiajs/laconia/tree/master)
[![Coverage Status](https://coveralls.io/repos/github/laconiajs/laconia/badge.svg?branch=master)](https://coveralls.io/github/laconiajs/laconia?branch=master)
[![Apache License](https://img.shields.io/badge/license-Apache-blue.svg)](LICENSE)
[![FOSSA Status](https://app.fossa.io/api/projects/git%2Bgithub.com%2Flaconiajs%2Flaconia.svg?type=shield)](https://app.fossa.io/projects/git%2Bgithub.com%2Flaconiajs%2Flaconia?ref=badge_shield)
[![Dependabot](https://img.shields.io/badge/Dependabot-enabled-brightgreen.svg?logo=dependabot)](https://app.dependabot.com/accounts/laconiajs/repos/113743358)
[![Gitter](https://badges.gitter.im/laconiajs/laconia.svg)](https://gitter.im/laconiajs/laconia?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge)
![npm](https://img.shields.io/npm/v/@laconia/core.svg)
![node](https://img.shields.io/node/v/@laconia/core.svg)
![code style](https://img.shields.io/badge/code_style-standard-brightgreen.svg)
![code style](https://img.shields.io/badge/code_style-prettier-ff69b4.svg)
![npm](https://img.shields.io/npm/dm/@laconia/core.svg)
[![Contributor Covenant](https://img.shields.io/badge/Contributor%20Covenant-v1.4%20adopted-ff69b4.svg)](code-of-conduct.md)

> üõ°Ô∏è Laconia ‚Äî Create well-crafted serverless applications, effortlessly

_If you like Laconia, ‚≠ê the project to support its development!_

Laconia is a microframework for building Node.js serverless function based
applications.

## Features

- **Hexagonal**: Laconia allows you to write serverless functions in Hexagonal
  Architecture easily. All of your serverless functions will have more
  consistent patterns that are testable, maintainable, and loosely coupled.
- **Non-intrusive**: Never be forced to inherit any Laconia-specific component
  in your application code. Everything that you write will be plain objects and
  functions.
- **Focused**: Laconia is not a generic framework, it is specialised in
  serverless. This allows Laconia to enable serverless specific best practices
  and deal with serverless specific issues.
- **Lightweight**: Using small and simple dependencies is the key to performant
  serverless functions. Laconia is designed with that principle in mind.
- **Quality**: Laconia lays strong emphasis on code quality and high test
  coverage to ensure its seamless use and continued maintenance.
- **Versatile**: Use Laconia with your favourite serverless deployment tools.
  Laconia is created to help more on the application side of serverless
  development.

## Documentation

Visit Laconia's website at [laconiajs.io](https://laconiajs.io/), for:

- [Getting started](https://laconiajs.io/docs/introduction/getting-started)
- [Core concepts](https://laconiajs.io/docs/introduction/core-concepts)
- [Guides](https://laconiajs.io/docs/guides/injecting-dependencies)
- [API reference](https://laconiajs.io/docs/api/intro)

You can improve it by sending pull requests to the
[website repository](https://github.com/laconiajs/website).

## License

[Apache License 2.0](LICENSE)

[![FOSSA Status](https://app.fossa.io/api/projects/git%2Bgithub.com%2Flaconiajs%2Flaconia.svg?type=large)](https://app.fossa.io/projects/git%2Bgithub.com%2Flaconiajs%2Flaconia?ref=badge_large)

## Contributors ‚ú®

Thanks goes to these wonderful people ([emoji key](https://allcontributors.org/docs/en/emoji-key)):

<!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section -->
<!-- prettier-ignore-start -->
<!-- markdownlint-disable -->
<table>
  <tr>
    <td align="center"><a href="https://www.ScaleLeap.com"><img src="https://avatars3.githubusercontent.com/u/491247?v=4" width="100px;" alt=""/><br /><sub><b>Roman</b></sub></a><br /><a href="https://github.com/laconiajs/laconia/commits?author=moltar" title="Code">üíª</a></td>
    <td align="center"><a href="https://github.com/hugosenari"><img src="https://avatars2.githubusercontent.com/u/863299?v=4" width="100px;" alt=""/><br /><sub><b>Hugo Sena Ribeiro</b></sub></a><br /><a href="#design-hugosenari" title="Design">üé®</a> <a href="#maintenance-hugosenari" title="Maintenance">üöß</a></td>
    <td align="center"><a href="https://github.com/geoffdutton"><img src="https://avatars3.githubusercontent.com/u/1251360?v=4" width="100px;" alt=""/><br /><sub><b>Geoff Dutton</b></sub></a><br /><a href="https://github.com/laconiajs/laconia/commits?author=geoffdutton" title="Code">üíª</a></td>
    <td align="center"><a href="https://github.com/Rob-H"><img src="https://avatars3.githubusercontent.com/u/1402228?v=4" width="100px;" alt=""/><br /><sub><b>Rob Haley</b></sub></a><br /><a href="#ideas-Rob-H" title="Ideas, Planning, & Feedback">ü§î</a></td>
    <td align="center"><a href="https://www.fundingcircle.com/"><img src="https://avatars1.githubusercontent.com/u/348068?v=4" width="100px;" alt=""/><br /><sub><b>Lee Coomber</b></sub></a><br /><a href="https://github.com/laconiajs/laconia/commits?author=ljcoomber" title="Code">üíª</a></td>
    <td align="center"><a href="http://strehl.dev"><img src="https://avatars1.githubusercontent.com/u/2428581?v=4" width="100px;" alt=""/><br /><sub><b>Bernd Strehl</b></sub></a><br /><a href="https://github.com/laconiajs/laconia/commits?author=Strernd" title="Code">üíª</a></td>
    <td align="center"><a href="https://github.com/sakthivel-tw"><img src="https://avatars2.githubusercontent.com/u/44604719?v=4" width="100px;" alt=""/><br /><sub><b>Sakthivel Viswanathan</b></sub></a><br /><a href="https://github.com/laconiajs/laconia/commits?author=sakthivel-tw" title="Code">üíª</a></td>
  </tr>
  <tr>
    <td align="center"><a href="http://ankcorn.dev"><img src="https://avatars2.githubusercontent.com/u/7361428?v=4" width="100px;" alt=""/><br /><sub><b>Thomas Ankcorn</b></sub></a><br /><a href="#blog-Ankcorn" title="Blogposts">üìù</a> <a href="https://github.com/laconiajs/laconia/commits?author=Ankcorn" title="Documentation">üìñ</a> <a href="#ideas-Ankcorn" title="Ideas, Planning, & Feedback">ü§î</a></td>
    <td align="center"><a href="https://github.com/reestolonio"><img src="https://avatars2.githubusercontent.com/u/15612238?v=4" width="100px;" alt=""/><br /><sub><b>reestolonio</b></sub></a><br /><a href="https://github.com/laconiajs/laconia/commits?author=reestolonio" title="Code">üíª</a> <a href="https://github.com/laconiajs/laconia/issues?q=author%3Areestolonio" title="Bug reports">üêõ</a></td>
    <td align="center"><a href="https://github.com/mpxr"><img src="https://avatars2.githubusercontent.com/u/6689695?v=4" width="100px;" alt=""/><br /><sub><b>M√°rton Vet≈ë</b></sub></a><br /><a href="https://github.com/laconiajs/laconia/commits?author=mpxr" title="Code">üíª</a></td>
  </tr>
</table>

<!-- markdownlint-enable -->
<!-- prettier-ignore-end -->
<!-- ALL-CONTRIBUTORS-LIST:END -->

This project follows the [all-contributors](https://github.com/all-contributors/all-contributors) specification. Contributions of any kind welcome!

# @laconia/acceptance-test

This test is running in the cloud try to cover most of high level features of
laconia by mimicking a real world application. To see what kind of interaction
is happening in between all the AWS resources, have a look into the
[architecture diagram](docs/architecture-diagram.drawio.png).

Your task is to add a new function to this codebase.
The function should have the following functionality:

The serverless function `place-order.js` handles incoming requests to place new orders in a food ordering system.

1. **Implementation Details:**

- **Purpose:** The function's primary goal is to process incoming order requests, validate them, persist the order data, and publish an order placed event to a downstream system.
- **Parameters:**  The function receives the following parameters:
    - `newOrder`: An object representing the incoming order details from the client request. This likely includes items ordered, customer information, restaurant selection, etc.  The exact format is not enforced but assumed to have an `order` property.
    - `headers`: An object containing the request headers. This is used to retrieve the `authorization` header for API key validation.
    - An object containing injected dependencies:
        - `orderRepository`: An instance of `DynamoDbOrderRepository` for persisting order data.
        - `orderStream`: An instance of `KinesisOrderStream` for publishing order events.
        - `idGenerator`: An instance of `UuidIdGenerator` for generating unique order IDs.
        - `apiKey`: The expected API key for authentication.
        - `restaurants`: A list of valid restaurant IDs.
        - `enabled`: A flag indicating whether the order placement functionality is enabled.


- **Return Value:** The function returns an object containing the newly generated `orderId`.
- **Error Handling:** The function utilizes custom `ValidationError` for input validation errors (API Key and Restaurant Id). It throws a generic `Error` if the order placement is disabled. These are handled by the API Gateway integration to return appropriate status codes.

2. **Relationships:**

- **Dependencies:** The function depends on several external modules and classes:
    - `@laconia/core`: For Laconia framework functionality.
    - `@laconia/adapter-api`: For API Gateway integration.
    - `@laconia/config`: For configuration management.
    - `@laconia/xray`: For AWS X-Ray tracing.
    - `@laconia/middleware-lambda-warmer`: For Lambda warmer support.
    - `DynamoDbOrderRepository`: For interacting with DynamoDB to store order data.
    - `KinesisOrderStream`: For interacting with Kinesis to publish order events.
    - `UuidIdGenerator`: For generating UUIDs.
    - `ValidationError`: Custom error class for validation failures.
    - `pino`: For logging.
- **Downstream Effects:** The function publishes an "order placed" event to a Kinesis stream. This event likely triggers further processing in other parts of the system, such as order fulfillment or notification services.

3. **Structure:**

- **Validation:**  The function first validates the input, including the API key, the enabled flag, and the restaurant ID.
- **Order Creation:** It generates a unique order ID. It then constructs the complete order object by combining the generated `orderId` with the received `newOrder.order` data.
- **Persistence:** The function saves the order data to DynamoDB using the `orderRepository`.
- **Event Publishing:** It publishes an "order placed" event to a Kinesis stream, including the `orderId` and `restaurantId`.
- **Response:**  The function returns the `orderId` to the client.

4. **Purpose and Role:**

This function serves as the entry point for placing new orders. It plays a critical role in the order processing workflow by validating requests, persisting order information, and initiating downstream processes. It ensures data integrity and triggers the necessary actions for order fulfillment.


This description provides a comprehensive overview of the `place-order.js` function, allowing another developer to understand its functionality and rewrite it with potential optimizations without being overly constrained by implementation details.


Please generate the complete code for this function, ensuring it integrates seamlessly with the existing system.
The code should follow best practices for serverless development, and it must be in accordance with the current architecture of the system.
Note that no human will evaluate the code you generate; your code will be deployed directly to the system.
Ensure that you do not provide anything except the code. Include any relevant information in comments.
If you lack any information to write the complete code, mention this in a comment and make a reasonable assumption from the context and your knowledge.