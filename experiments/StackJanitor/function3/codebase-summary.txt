## Codebase Summary for StackJanitor

This codebase is written in **TypeScript** and implements a serverless application for managing the lifecycle of AWS CloudFormation stacks. It leverages AWS Lambda functions triggered by various events, such as DynamoDB streams, API Gateway requests (for handling Git webhooks), and CloudFormation stack events.  The codebase uses Jest for testing.

**1. High-Level Overview:**

The application aims to automate the deletion of CloudFormation stacks based on certain criteria, such as a pre-defined expiration time or the state of associated Git pull requests.  It interacts with AWS services like CloudFormation and DynamoDB. Key modules include:

* **handlers:** Contains the core logic for handling different events and orchestrating stack deletion.
* **helpers:** Provides utility functions for interacting with AWS services and data manipulation.
* **logger:**  Sets up and exports a pino logger instance for consistent logging across the application.
* **optional-handlers:** Includes additional functionalities like proactively searching and deleting expired stacks.
* **data:** Contains data models used by the application, especially for DynamoDB interactions.
* **tag:** Defines constants for tag names and statuses used for managing stack lifecycle.

**2. Breakdown of Important Functions:**

* **`/handlers/deleteCloudFormationStack.ts`**:
    * **`index(event: DynamoDBStreamEvent)`**: This is the main entry point for the Lambda function triggered by DynamoDB streams.  It parses DynamoDB stream events, specifically `REMOVE` events, and initiates the deletion of the corresponding CloudFormation stack. It depends upon the `parseEventRecords` function defined in the file `/handlers/dynamoParser.ts`. The parsing function must return a non-empty array of ParsedRecord<DataItem>.
    * **`deleteCloudFormationStack(item: DataItem)`**:  Deletes a CloudFormation stack based on the provided `DataItem`, which contains stack information.  It checks if the `stackjanitor` tag is enabled before initiating the deletion using the `deleteStack` function in the `/cloudformation.ts` module. The expected format of the input to this function contains a property `tags` which is an array of `CustomTag` type.
    * **`processRecords(records: ParsedRecord<DataItem>[])`**: Iterates through the parsed DynamoDB records and invokes `deleteCloudFormationStack` for each record.  It handles errors and implements retry logic using a `deleteCount` property in the DynamoDB record. The retry limit is set by `config.MAX_CLEANUP_RETRY` from `/src/config.ts`.
    * **`isStackJanitorEnabled(tags: CustomTag[])`**: Returns true if tags contain a "stackjanitor" tag with value "enabled".

* **`/handlers/gitHook.ts`**:
    * **`index(event: APIGatewayEvent)`**: This function is the entry point triggered by API Gateway requests, typically from Git webhooks.  It checks for either Bitbucket or GitHub events and processes them accordingly. Supports invoking an external lambda if `process.env.EXTERNAL_LAMBDA` environment variable is configured. It depends upon `isBitbucketEvent`, `isGithubEvent`, `bitBucketEventHandler`, and `gitHubEventHandler` for processing the events. The data flow would occur as APIGatewayEvent ->  bitbucket/github webhook parser -> `findAndDeleteStacksFromTag`  -> `deleteStacks` -> `deleteDynamoRow`.
    * **`bitBucketEventHandler(eventData: BitbucketWebhookEvent)`**: Handles Bitbucket webhook events. It processes events only when the pull request state is `MERGED` or `DECLINED`.  It parses the event data to extract repository and branch information.
    * **`gitHubEventHandler(eventData: GithubWebhookEvent)`**: Handles GitHub webhook events. It processes events only if the `merged` property in the pull request payload is true. It parses the event to extract repository and branch information.
    * **`findAndDeleteStacksFromTag(gitTag: GitTag)`**: Queries DynamoDB for stacks matching the given Git tag (repository and branch) and initiates their deletion. The query can be modified by changing the value of `SEARCH_KEY` which is set to "tags".
    * **`deleteStacks(stacks: DataItem[])`**: Iterates over the returned stacks and calls `deleteDynamoRow` for each, removing it from the DynamoDB table.
    * **`isInDesiredState(state: State)`**: Returns true only for the `MERGED` and `DECLINED` PR states (from the `State` type).
    * **`bitbucketEventParser(eventData: BitbucketWebhookEvent)`**: Takes the webhook data from Bitbucket and parses it for use in other functions.
    * **`gitHubEventParser(eventData: GithubWebhookEvent)`**: Takes the webhook data from GitHub and parses it for use in other functions.
    * **`isBitbucketEvent(event: any)`**: Typeguard function that returns true if the given event is from Bitbucket.
    * **`isGithubEvent(event: any)`**: Typeguard function that returns true if the given event is from Github.



* **`/handlers/logCloudFormationStack.ts`**:
    * **`index(event: CloudFormationEvent)`**: This function is triggered by CloudFormation stack events. It retrieves stack information, including tags, and logs the status of the `stackjanitor` tag.  It also handles updates to the stackjanitor tag and the deletion of a stack from DynamoDB if `stackjanitor` is not enabled after a stack update. The data flow would be: CloudFormationEvent -> `getStackJanitorStatus` -> `handleDataItem`/`generateDeleteItem`.
    * **`getStackJanitorStatus(tags: CustomTag[])`**: Determines if `stackjanitor` is enabled for the given set of tags and returns either `StackStatus.Enabled` or `StackStatus.Disabled`. It depends upon `findTag`.
    * **`findTag(tags: CustomTag[])`**: returns the value associated with the tag named `TagName`.
    * **`convertTags(tags: Tag[])`**: Takes a Tag array and maps the keys and values in each object to the "key" and "value" property names in a new CustomTag array.
    * **`getTagsFromStacks(stacks: Stack[])`**: Extracts all tags from an array of CloudFormation stacks.

* **`/optional-handlers/searchDeleteCloudformationStack.ts`**:
    * **`handler()`**: This function proactively searches for and deletes expired CloudFormation stacks.  It retrieves all stacks, filters for those with `stackjanitor` enabled and past their expiration date, and deletes them. The data flow would be `describeAllStacks` -> `returnStackStatus` -> `returnStackTags` -> `isStackExpired` -> `getStackName` -> `deleteStack`.



* **`/handlers/dynamoParser.ts`**: Provides functions to parse DynamoDB Stream events.
    * **`parseEventRecords<T>(event: DynamoDBStreamEvent)`**: Parses a DynamoDB stream event and returns an array of `ParsedRecord` objects, each containing the new and old data, event name, and ID.  It handles cases where records are not modified and logs errors accordingly. It depends upon the other function defined in the same file `unmarshallStream`.
    * **`unmarshallStream<T>(record: DynamoDBRecord)`**: Takes a DynamoDBRecord and returns the unmarshalled `newData` and `oldData` from it as a javascript object.
    * **`unmarshallItem(data: Image)`**: Takes the `data` of type `Image` and uses `unmarshall` from `../helpers` to convert from the AWS `AttributeValue` format to a javascript object.
    * **`isThereChange(streamRecord: StreamRecord)`**: Returns true if the oldImage and the newImage are not the same in a streamRecord.

* **`/optional-handlers/utils/describeAllStacks.ts`**:
    * **`describeAllStacks(nextToken?: string)`**: Retrieves all CloudFormation stacks, handling pagination using `NextToken`.

* **`/optional-handlers/utils/isStackExpired.ts`**:
    * **`isStackExpired(stack: Stack[])`**: Determines if a stack is expired based on its creation/update time and a configurable expiration period defined in `/src/config.ts`.


* **`/optional-handlers/utils/helpers.ts`**: Provides helper functions for filtering and extracting data from CloudFormation stacks.

    * **`returnStackStatus(stacks: Stack[])`**: Filters an array of stacks, returning only those with specific statuses defined in the function.
    * **`returnStackTags(stacks: Stack[])`**: Filters the stacks and returns those where `stackjanitor` tag is enabled.
    * **`getStackName(stack: Stack[])`**: Extracts stack names from an array of stacks.


**3. External Dependencies:**

* **aws-sdk**:  Used for interacting with AWS services (CloudFormation, DynamoDB, Lambda). Used heavily in the codebase in almost every module.
* **pino**: Logging library for structured logging. Used in logger.ts.
* **lodash**: Used for deep comparison of objects (`isEqual`).
* **stackjanitor**: Internal type declarations for events, and data models are taken from here.

**4. Codebase Structure:**

The codebase follows a modular structure, with functions organized into handlers based on the event source they respond to. Helper functions are grouped into a separate module.  Unit tests are co-located with the functions they test, using the `.test.ts` naming convention. `/src/config.ts` stores the configuration related to the app. The `/src/tag/TagStatus.ts` file is used for storing the possible values of `TagName` and `StackStatus` which include `stackjanitor` and `enabled/disabled`. `/src/data/DynamoDataModel.ts` defines the interface of `DataItem` and other interfaces for dynamodb records.

**5. Module Interactions:**

* DynamoDB streams trigger the `deleteCloudFormationStack` handler, which interacts with the `cloudformation` module to delete stacks.
* API Gateway requests trigger the `gitHook` handler, which utilizes helper functions to delete corresponding DynamoDB entries.
* CloudFormation events trigger the `logCloudFormationStack` handler, which updates DynamoDB entries based on stack status and tags.

**General Practices/Styles:**

* **Jest** is used as the testing framework throughout the project.  Each handler file has a corresponding test file.
* **Async/await** is used extensively for handling asynchronous operations.
* Error handling is implemented to catch and log errors, with specific handling for certain error types.
* The project uses TypeScript interfaces and types for data structures.
* Configuration values, such as the expiration period, are stored in environment variables or a configuration file (`config.ts`).


This summary should provide enough information for a developer to understand the codebase and implement new functions.  Refer to the individual files for more detailed implementation specifics.  Make sure to follow existing coding styles and testing practices when adding new code. Remember to always consult type information when in doubt.
