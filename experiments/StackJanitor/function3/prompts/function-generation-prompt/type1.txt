You are a computer scientist specializing in serverless computing (especially FaaS).
You are working with a FaaS codebase whose README is as follows:

# StackJanitor

![StackJanitor](https://i.imgur.com/XXdfuf9.png)

![](https://github.com/lendi-au/StackJanitor/workflows/Build/badge.svg)
![](https://github.com/lendi-au/StackJanitor/workflows/Release/badge.svg)

StackJanitor is an event-driven serverless application that cleans up AWS CloudFormation Stacks in development environments based on TTL (expiration time) and git pull request events. It cleans up unused development CFN stacks to help you save AWS cloud development costs.

## Use Case

We initially came up with the idea for StackJanitor when we needed to start cleaning up a lot of our ephemeral stacks on a regular basis. There are some that currently do this using polling mechanisms, but we figured we could use this as an opportunity to come up with an event-driven serverless app that can do this without having to continually poll resources.

## How it works

StackJanitor automatically adds all of the CloudFormation stacks that you create in your AWS account to a DynamoDB Table.
If you have specified a stacktag `stackjanitor` to `enabled`, StackJanitor will add your CloudFormation Stack to DynamoDB, setting a TTL field on it to 7 days (this is default, but can be changed).

When the DynamoDB row expires and deletes the row, a lambda function is then triggered that deletes your stack.

StackJanitor can also delete stacks using either a Github or Bitbucket webhook. Our current workflow uses merged pull request events to trigger the webhook so that we can quickly delete stacks as part of our development workflow.

To use this feature, your CloudFormation Stack must also be tagged with `BRANCH` and `REPOSITORY` in order for StackJanitor to find the stack associated with your branch/repository combination and delete it.

CloudFormation stack creation event will produce a CloudTrail log which will trigger a step function/lambda to set a TTL for fresh stacks in a DynamoDB table.
CloudTrail logs from any update stack events concerning that development stack will re-invoke the Lambda function to refresh the TTL.

However, If stack resources remain unused for certain period of time, TTL expiration in the DynamoDB table will invoke the Lambda (responsible for cleaning up the stack) to perform a safe cleaning up process of the CFN stack.

## Architecture

![StackJanitor Architecture](./img/StackJanitor.png "StackJanitor Architecture")

![StackJanitor Architecture](./img/StackJanitor-git.jpg "StackJanitor Architecture")

It's good to note that the actual CloudFormation delete is always done by the
`./src/handlers/deleteCloudFormationStack.ts` function AFTER the DynamoDB
stream for expired/deleted records.

As the data flow will create another cloudtrail event with the 'DeleteStack'
operation, the lambda function will be invoked a second time but nothing
will happen.

## Installation

1. Clone the repo.
   `git clone https://github.com/lendi-au/StackJanitor.git`
2. Install node modules by running `npm install`
3. Install the Serverless Framework open-source CLI by running `npm install -g serverless`
4. Set AWS credentials. Serverless framework uses AWS credentials configured at `~/.aws/credentials`

   Follow [this guide](https://serverless.com/framework/docs/providers/aws/guide/credentials/) to setup AWS credentials for serverless.

5. Deploy StackJanitor by running `serverless deploy`
6. Put a tag in CloudFormation stack `stackjanitor = "enabled"` to enable monitoring.

## Configuration

### Pre-Requisites

You will need to have CloudTrail running in your account as CloudTrail events trigger Lambda functions.

### Options

The app comes pre-configured with most things it needs. By default it sets the expiry time on a stack to 7 days.
You can override this using the `DEFAULT_EXPIRATION_PERIOD` custom variable found in the `serverless.yml`

## Webhook Support

If you don't want to wait 7 days for your stack to be deleted, you can trigger
a deletion event using a GitHub or Bitbucket webhook.

As part of your CloudFormation build, make sure you tag your CloudFormation
Stack with:
REPOSITORY = `Repository Name`
BRANCH = `Git Branch`

Your webhook endpoint will be available when you first set up your serverless
app with `serverless deploy`

### Bitbucket

1. Go to `Settings > Webhooks` and click `Add Webhook`.
2. Put the webhook endpoint in `URL` field.
3. Set `Status` to `Active`.
4. Set `Triggers` to `Choose from a full list of triggers` and select Pull request `Merged` and `Declined`.
5. Save the settings.

### GitHub

1. Go to `Settings > Webhooks` and click `Add Webhook`.
2. Put the webhook endpoint in `Payload URL` field.
3. Set Content type to `application/json`.
4. Select `Let me select individual events` and choose `Pull requests`.
5. Choose `Active` to activate the webhook trigger.
6. Save the settings.

### Additional Lambda invocation

There was a need for us to extend the gitHook functionality but this wasn't
directly related to the overall functionality of Stackjanitor.

Hence, we've extended the gitHook lambda handler to be able to invoke another
lambda function by setting the `EXTERNAL_LAMBDA` environment variable with the
ARN of the lambda function to invoke.

The default permission of the `serverless.yml` has also been updated to allow
for lambda invocations.

## Optional scheduled Lambda function for scanning and deleting old stacks

This is a fallback mechanism which can remove stacks older than
`DEFAULT_EXPIRATION_PERIOD` with the `stackjanitor: enabled` tag on the stack.

This optional scheduled Lambda function is handled by
`./src/optional-handlers/searchDeleteCloudformationStacks.ts` which can help
scan and delete old stacks when the stacks are not cleaned up properly.

This optional function is not enabled by default. You can update
`serverless.yml` to enable this function.

## Possible improvements

- Maybe we don't care to track `DeleteStack` events and perform table cleanup
  items around this as it leads to a bit of logic that goes around in circles.

## Upcoming features

- [ ] Slack Notifications when stack has been deleted
- [ ] Interactive Slack Messages to extend expiry time

Your task is to add a new function to this codebase.
The function should have the following functionality:

The function `monitorCloudFormationStack` acts as the core logic for monitoring and managing the lifecycle of CloudFormation stacks within a serverless application. Its primary purpose is to respond to CloudFormation events (create, update, and delete) and maintain a persistent record of stack information, including expiration times, for automated cleanup.

**1. Implementation Details:**

* **Parameters:**
    * `event`: A `CloudFormationEvent` object containing details about the CloudFormation stack operation (create, update, or delete). This object contains information like the stack name, event time, request parameters, and response elements.
    * `dataMapper`: An `Entity` object from the `dynamodb-toolbox` library. This object represents a DynamoDB table and provides methods for interacting with it (put, delete, get, update).

* **Return Value:** A `Promise` that resolves to a `MonitoringResultStatus` (either "success" or "ignore").  "success" indicates that the function successfully processed the event and updated the database. "ignore" signifies that the event was either of an unsupported type or an error occurred during processing.

* **Logic:**
    * The function uses a `switch` statement to determine the type of CloudFormation event (`CreateStack`, `UpdateStack`, or `DeleteStack`).
    * Based on the event type, it generates a data item representing the stack and performs a corresponding action on a DynamoDB table using the `dataMapper`.  
    * For create and update events, it generates a new `DataItem` including the stack name, ID, expiration time (calculated from the event time and a configured default expiration period), and tags. It then stores or updates this item in the DynamoDB table.
    * For delete events, it generates a `DeleteItem` with the stack name and ID and removes the corresponding item from the DynamoDB table.
    * Helper functions (`generateItemFromEvent`, `generateDeleteItem`, `getExpirationTime`) are used to encapsulate the logic for generating data items and expiration times.
    * The `handleDataItem` function abstracts the database interaction logic, handling put, delete, get, and update operations based on the provided action.

**2. Relationships:**

* **Dependencies:**
    * `config`:  Imports configuration values, specifically `DEFAULT_EXPIRATION_PERIOD` and `DELETE_INTERVAL`.
    * `logger`:  Used for logging information and errors.
    * `CloudFormationEvent`, `DataItem`, `DeleteItem`, `StackJanitorStatus` types.
    * `Actions`, `JanitorRecord` for DynamoDB interaction.
    * `Entity` from `dynamodb-toolbox` for database operations.
    * `getStackArn` function to retrieve stack ARN when needed.

* **Influences:** The function directly modifies the state of a DynamoDB table by adding, updating, or removing stack records. It relies on the `JanitorRecord` entity to map to the specific DynamoDB table.


**3. Structure:**

The main structure revolves around the `switch` statement based on the `event.detail.eventName`. Each case within the `switch` statement calls helper functions to generate the appropriate data item (`DataItem` or `DeleteItem`) and then uses `handleDataItem` to interact with the DynamoDB table.  Error handling is implemented within `handleDataItem` to catch and log exceptions.


**4. Purpose and Role:**

This function is crucial for maintaining the state of CloudFormation stacks and enabling automated cleanup. It provides the following functionality:

* **Tracking Stack Creation/Updates:**  Ensures that newly created or updated stacks are recorded in the DynamoDB table with their expiration times.
* **Facilitating Stack Deletion:** Enables the deletion of stack information from the database when a stack is deleted.
* **Automated Cleanup (External):**  Although not directly implemented within this function, the stored expiration times in the DynamoDB table are used by other parts of the system (not shown) to trigger automated deletion of expired stacks.

This function essentially bridges the gap between CloudFormation events and a persistent data store, enabling other parts of the system to perform actions like automated cleanup.


Please generate the complete code for this function, ensuring it integrates seamlessly with the existing system.
The code should follow best practices for serverless development, and it must be in accordance with the current architecture of the system.
Note that no human will evaluate the code you generate; your code will be deployed directly to the system.
Ensure that you do not provide anything except the code. Include any relevant information in comments.
If you lack any information to write the complete code, mention this in a comment and make a reasonable assumption from the context and your knowledge.