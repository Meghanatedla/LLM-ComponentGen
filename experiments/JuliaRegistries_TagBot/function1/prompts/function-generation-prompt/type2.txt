 
You are a computer scientist specializing in serverless computing (especially FaaS).
You are working with a FaaS codebase whose description is as follows:

The codebase is written in Python and implements a serverless function (likely deployed as an AWS Lambda function or GitHub action) called TagBot, designed to automate the creation of GitHub releases for Julia packages. It interacts with the GitHub API and a package registry to determine new versions, generate changelogs, and create releases.

Here's a detailed breakdown:

**1. High-Level Overview:**

TagBot automates the release process of Julia packages by:

- Checking a Julia package registry for new versions of a registered package.
- Identifying the corresponding commit in the package repository.
- Generating release notes based on a template (and optionally custom notes from the registry).
- Creating a GitHub release and optionally a release branch and corresponding PR.
- Handling errors and reporting them to a central server.

**2. Important Functions/Modules:**

- **`/tagbot/__init__.py`**:
    - Defines a custom `LogFormatter` that formats log messages based on the runtime environment (local, lambda, or actions).
    - It configures the logger using this formatter to output logs to `sys.stdout`. The log level is `DEBUG` except for the local environment.
    - The environment setup is determined based on the `AWS_LAMBDA_FUNCTION_NAME` and `GITHUB_ACTIONS` environment variables.
- **`/tagbot/action/__init__.py`**:
    - Defines custom exception classes `Abort` (general) and `InvalidProject` (project-related), used for error handling and control flow within the action. Sets `TAGBOT_WEB` to "https://julia-tagbot.com".
- **`/tagbot/action/__main__.py`**:
    - This module contains the main entry point for the TagBot action.
    - Reads workflow inputs and environment variables using `get_input()`, with defaults from both local environment variables and an `action.yml` file.
    - Sets up the `Repo` object which performs the core release process by reading environment variables and inputs.
    - Uses `Repo.configure_ssh()` or `Repo.configure_gpg()` to setup secure communications as needed.
    - Iterates through new versions using `Repo.new_versions()`.
    - Handles release branch creation using `Repo.handle_release_branch()`.
    - Creates releases using `Repo.create_release()`.
    - Uses a try-except block to catch any exceptions, logging error information, reporting them to the `/tagbot/web` server, and finally stopping execution by raising `Abort`.
- **`/tagbot/action/repo.py`**:
    - This is the core module of TagBot, defining the `Repo` class.
    - **`Repo.__init__()`**: Initializes the `Repo` object, connecting to GitHub and the registry. It also initializes the Changelog, Git interaction, SSH/GPG configuration parameters, lookback time, and initializes some variables that are computed lazily when needed.
    - **`Repo.is_registered()`**: Checks if the repository is registered in the specified registry.
    - **`Repo.new_versions()`**: Determines new versions available in the registry that haven't been released yet.
    - **`Repo.create_dispatch_event()`**: Creates a repository dispatch event on GitHub, often used to trigger other workflows.
    - **`Repo.configure_ssh()`**: Configures SSH access for the repository.
    - **`Repo.configure_gpg()`**: Configures GPG for signing tags.
    - **`Repo.handle_release_branch()`**: Manages the creation, merging, or PR creation for a release branch.
    - **`Repo.create_release()`**: Creates a GitHub release.
    - **`Repo.handle_error()`**: Handles exceptions and reports errors to a web server.
    - **`Repo.commit_sha_of_version()`**: Retrieves the commit SHA for a specific version. It contains several private functions:
        - `_project()`: retrieves values from the `Project.toml` file.
        - `_registry_path()`: retrieves the path of the package in the registry.
        - `_registry_url()`: retrieves the URL of the package in the registry.
        - `_release_branch()`: retrieves the release branch name.
        - `_only()`: returns the first element of a list if it is a list, or the input itself otherwise.
        - `_maybe_decode_private_key()`: Decodes a base64-encoded private key.
        - `_create_release_branch_pr()`: Creates a pull request for the release branch.
        - `_tag_prefix()`: gets the tag prefix for the version tag.
        - `_get_version_tag()`: returns the prefixed version tag.
        - `_registry_pr()`: finds the pull request in the registry for the current version
        - `_commit_sha_from_registry_pr()`: retrieves the commit SHA from the registry PR body.
        - `_commit_sha_of_tree_from_branch()`: retrieves the SHA of a given tree from a specific branch.
        - `_commit_sha_of_tree()`: retrieves the SHA of a given tree from any branch.
        - `_commit_sha_of_tag()`: retrieves the SHA of a given tag.
        - `_commit_sha_of_release_branch()`: retrieves the SHA of the release branch.
        - `_filter_map_versions()`: filters versions and converts tree SHAs to commit SHAs.
        - `_versions()`: retrieves all versions from the registry `Versions.toml`.
        - `_versions_clone()`: retrieves versions similarly to `_versions()`, but uses a clone of the registry repository. This is only used when the registry is private.
        - `_pr_exists()`: checks if a PR exists for a specific branch.
        - `_run_url()`: gets the URL of the Github Actions run, including the ID.
        - `_image_id()`: gets the ID of the docker image.
        - `_report_error()`: reports an error through a POST request to the `/tagbot/web` server.
- **`/tagbot/action/git.py`**:
    - Defines the `Git` class for interacting with a Git repository, providing abstractions over common Git commands like `clone`, `checkout`, `merge`, `tag`, and `push`. This class manages SSH access and GPG signing configurations.
- **`/tagbot/action/changelog.py`**:
    - Defines the `Changelog` class responsible for generating release notes. It uses a Jinja2 template to format the changelog, incorporating data from closed issues and merged pull requests. It also fetches custom release notes embedded in registry PRs and uses methods from `Repo` to fetch Github API data and render. 
- **`/tagbot/local/__init__.py`**: Empty file.
- **`/tagbot/local/__main__.py`**:
    - Provides a command-line interface for running TagBot locally using the `click` library.
    - Defines a CLI command that mimics the inputs from the `action.yml` workflow file for local execution by using a `Repo` object.
- **`/tagbot/web/__init__.py`**:
    - Implements a Flask web application to handle error reports from the GitHub action.
    - Defines routes for `/` (index) and `/report` (error reporting).
    - Uses `boto3` to invoke a Lambda function (`REPORTS_FUNCTION_NAME`) to process error reports asynchronously. 
- **`/test/*`**: This directory contains tests for the various modules.

**3. External Dependencies:**

- `base64`: For encoding and decoding base64 strings.
- `boto3`: For interacting with AWS Lambda (in `web`).
- `click`: For creating command-line interfaces (in `local`).
- `datetime`: For date and time manipulation.
- `docker`: For interacting with Docker (for getting image IDs).
- `flask`: For creating web applications (in `web`).
- `github`: PyGithub, for interacting with the GitHub API.
- `gnupg`: For GPG operations.
- `hashlib`: For hashing.
- `io`: For in-memory file operations.
- `jinja2`: For templating changelogs.
- `json`: For JSON serialization and deserialization.
- `logging`: For logging.
- `os`: For operating system interactions.
- `pathlib`: For path manipulation.
- `pexpect`: For automating interactive processes (SSH password input).
- `re`: For regular expressions.
- `requests`: For HTTP requests.
- `semver`: For semantic versioning operations.
- `stat`: For file system status information.
- `subprocess`: For running subprocesses.
- `sys`: For system-specific parameters and functions.
- `tempfile`: For creating temporary files and directories.
- `toml`: For parsing TOML files.
- `traceback`: For handling tracebacks during error reporting.
- `typing`: For type hints.
- `urllib.parse`: For URL parsing.
- `werkzeug`: for implementing WSGI applications (in web).
- `yaml`: For YAML operations (for config files).


**4. Codebase Structure:**

The codebase is structured into subdirectories:

- `tagbot/action`: Contains the core TagBot logic for the GitHub action.
- `tagbot/local`: Contains the code for running TagBot locally.
- `tagbot/web`: Contains the Flask web application for handling error reports.
- `test`: Contains tests.


**5. Interactions Between Modules:**

- The `action/__main__.py` module orchestrates the overall workflow.
- `action/repo.py` handles most of the core logic, including working with Git, the registry, and GitHub.
- `action/git.py` and `action/changelog.py` provide specialized functionality for Git operations and changelog generation, respectively. The `changelog.py` module interacts heavily with the `repo.py` module to fetch data from Github, render a template, and interact with the registry PR.
- `local/__main__.py` module offers a command-line interface that allows access to core functions from `action/repo.py`, useful for manual invocation.
- The `web` application receives error reports from `action/repo.py` and processes them asynchronously using AWS Lambda.

**Additional Notes:**

- Every function in `tagbot/action` interacts with the Github API using the `github` (PyGithub) framework.
- Logging is used extensively using a custom formatter and log level is `DEBUG` except for local runs, which default to no particular log level.
- Type hints are used across the codebase.



This summary should allow a developer to understand the codebase's functionality and implement new features or functions without referencing the original source code.  When in doubt, follow similar patterns and styles as the existing codebase: particularly the usage of the `github` library, the organization into submodules by area of responsibility, and the heavy use of private methods in `Repo`.

Your task is to add a new function to this codebase. 
The function should have the following functionality:

The Python code defines a serverless function (likely an AWS Lambda function) designed to handle error reports generated during tagged releases of Julia packages.  It aims to consolidate duplicate error reports and streamline the debugging process.

1. **Implementation Details:**

The `handler` function serves as the entry point for the Lambda function. It receives an event (a dictionary containing information about the error) and a context object. The event contains the following keys: `image` (container image ID), `repo` (GitHub repository), `run` (CI run URL), and `stacktrace` (error stack trace). The handler function extracts these values from the event and passes them to the `_handle_report` function.


`_handle_report`: This function processes the error report.  It first checks for duplicates using the `_find_duplicate` function. If a duplicate is found and the repository hasn't already commented on the issue, it adds a comment to the existing issue via `_add_duplicate_comment`. If no duplicate is found, it creates a new issue using `_create_issue`.


`_already_commented`: This helper function checks if a given GitHub issue already has a comment from the specified repository.  It iterates through the issue body and existing comments, searching for a string indicating the repository has already reported the issue.


`_is_duplicate`: This function compares two stacktraces using the Levenshtein distance to determine if they represent the same error.  It calculates a similarity ratio based on the Levenshtein distance and the lengths of the stacktraces.  Two stacktraces are considered duplicates if the ratio is below a threshold (0.1).


`_find_duplicate`:  This function searches for a duplicate error report among existing GitHub issues in a designated repository (`TAGBOT_ISSUES_REPO`).  It extracts the stacktrace from each issue's body and compares it to the input stacktrace using `_is_duplicate`.


`_report_body`:  This helper function formats the error report into a string, including the repository, run URL, image ID, and stacktrace.


`_add_duplicate_comment`:  This function adds a comment to an existing GitHub issue, indicating a probable duplicate error. It uses the `_report_body` to format the comment.


`_create_issue`: This function creates a new GitHub issue for the error report. The issue title includes the repository name, and the body is generated by `_report_body`.


2. **Relationships:**

The code interacts with the GitHub API via the `github` library to manage issues and comments. It also uses the `pylev` library to calculate Levenshtein distance.  It depends on environment variables, specifically `GITHUB_TOKEN` and `TAGBOT_ISSUES_REPO_NAME`, for authentication and repository identification. The `logger` object is used for logging information.


3. **Structure:**

The `handler` function acts as the entry point. The core logic resides in `_handle_report`, which orchestrates the duplicate detection and reporting process. The remaining functions are helper functions called by `_handle_report`.


4. **Purpose and Role:**

The function's primary purpose is to automatically report errors encountered during tagged releases of Julia packages and to prevent duplicate issue creation. This helps maintain a clean issue tracker and facilitates efficient debugging by grouping related error reports.


This function plays a crucial role in automating the error reporting process, reducing manual effort and improving the maintainability of the Julia package ecosystem.  It relies on comparing stack traces to identify duplicate reports and interacts with the GitHub API to create and manage issues. The function prioritizes efficient reporting by adding comments to existing issues when duplicates are found, thus consolidating related error information.


Please generate the complete code for this function, ensuring it integrates seamlessly with the existing system. 
The code should follow best practices for serverless development, and it must be in accordance with the current architecture of the system.
Note that no human will evaluate the code you generate; your code will be deployed directly to the system. 
Ensure that you do not provide anything except the code. Include any relevant information in comments. 
If you lack any information to write the complete code, mention this in a comment and make a reasonable assumption from the context and your knowledge.
